<?xml version="1.0" encoding="utf-8"?>
<mx:WindowedApplication xmlns:mx="http://www.adobe.com/2006/mxml"
                        xmlns:fl="flexlib.controls.*"
                        layout="vertical"
                        horizontalAlign="left"
                        paddingBottom="6"
                        paddingLeft="6"
                        paddingRight="6"
                        paddingTop="6"
                        title="FlexTracer"
                        alwaysInFront="true"
                        showStatusBar="false"
                        showTitleBar="true"
                        backgroundGradientAlphas="[1.0, 1.0]"
                        applicationComplete="{initializeApplication()}"
                        backgroundGradientColors="[#DEDEDE, #BCBCBC]"
                        themeColor="#FF871D"
                        cornerRadius="0"
                        width="900"
                        height="600"
                        verticalScrollPolicy="off"
                        horizontalScrollPolicy="off">

    <mx:Style source="styles/fcsh.css"/>
    <mx:Script>
		<![CDATA[

        import com.flexspy.FlexSpy;

        import connection.Connection;
        import connection.ConnectionEvent;
        import connection.ITraceMessage;
        import connection.TraceMessage;

        import file.FileMonitor;

        import file.FileMonitorEvent;

        import log.LogTimeRenderer;

        import log.MessageRenderer;

        import log.ObjectDataDescriptor;
        import log.SenderRenderer;

        import log.TraceLine;
        import log.TraceRenderer;

        import mx.collections.ArrayCollection;
        import mx.collections.Sort;
        import mx.collections.SortField;
        import mx.containers.Box;
        import mx.utils.ObjectUtil;

        import mx.utils.StringUtil;

        import styles.CSSIconUtil;


        // The Array data provider
        [Bindable]
        public var menuData:ArrayCollection = new ArrayCollection([
            new TraceMessage({test:'ok'}, (new Box())),
            new TraceMessage({test:'false'}, (new Box())),
            new TraceMessage({test:'ok'}, (this)),
            new TraceMessage(this, (new Box()))
        ]);

        [Bindable]
        public var traces:ArrayCollection = new ArrayCollection();

        private var fileMonitor:FileMonitor;

        private function initializeApplication():void
        {
            var sort:Sort = new Sort();
            var field:SortField = new SortField();
            field.name = "time";
            sort.fields = [field];
            traces.sort = sort;
            traces.refresh();
            Connection.instance.addEventListener(ConnectionEvent.MESSAGE_INPUT, onMessageInput);

            var flexlog:File = File.userDirectory.resolvePath("Application Data/Macromedia/Flash Player/Logs/flashlog.txt");
            //trace(flexlog.nativePath, "exists", flexlog.exists);
            fileMonitor = new FileMonitor(flexlog);
            fileMonitor.addEventListener(FileMonitorEvent.CHANGE, onFlexlogChange);
            fileMonitor.watch();
        }

        private function onFlexlogChange(event:FileMonitorEvent):void
        {
            var outStream:FileStream = new FileStream();
            outStream.open(event.fileProperty, FileMode.READ);
            var logtext:String = outStream.readUTFBytes(outStream.bytesAvailable);
            var lines:Array = logtext.split("\n");
            var traceLines:ArrayCollection = new ArrayCollection();
            for each (var line:String in lines)
            {
                traceLines.addItem(new TraceLine(line));
            }
            traceLog.dataProvider = traceLines;
            traceLog.validateNow();
            traceLog.scrollToIndex(traceLines.length - 1);
            //traceLog.text = logtext;
        }

        private function onMessageInput(event:ConnectionEvent):void
        {
            traces.addItem(event.message);
            logGrid.validateNow();
            logGrid.scrollToIndex(traces.length - 1);
        }

        private function onLogGridSelectionChange():void
        {
            if (logGrid.selectedItem)
            {
                var message:ITraceMessage = ITraceMessage(logGrid.selectedItem);
                propertiesTree.dataProvider = printObject(message);
            }
        }

        public function printObject(obj:ITraceMessage, filters:Array = null):ArrayCollection
        {
            var string:String = ObjectUtil.toString(obj.message, null, filters);
            var lines:Array = string.split("\n");
            var result:ArrayCollection = new ArrayCollection();
            parseBlock(0, lines, result);
            var itemAt:Object = result.getItemAt(0);
            itemAt.label = obj.messageAsString;
            return result;
        }

        private function parseBlock(pos:int, lines:Array, result:ArrayCollection):int
        {
            var node:Object = {"label":StringUtil.trim((lines[pos] as String)), "children": new ArrayCollection()};

            var min:int = countSpace(lines[pos] as String);
            var cnt:int;
            var cnt2:int;
            var type:String = "";
            for (var i:int = pos + 1; i < lines.length; i++)
            {
                cnt = countSpace(lines[i] as String);
                if (cnt == (min + 2))
                {
                    cnt2 = countSpace(lines[i + 1] as String);
                    if ((cnt2 == (cnt + 2)))
                    {
                        i = parseBlock(i, lines, ArrayCollection(node["children"])) - 1;
                    }
                    else
                    {
                        var propertyNode:Object = {label: StringUtil.trim((lines[i] as String))};
                        ArrayCollection(node["children"]).addItem(propertyNode);
                    }
                }
                else
                {
                    break;
                }
            }
            result.addItem(node);
            return i;
        }

        private function countSpace(line:String):int
        {
            if ((line == null) || (line.length == 0))
            {
                return 0;
            }
            var count:int = 0;
            var cod:Number = line.charCodeAt(count);
            while (cod == 32)
            {
                count++;
                if (count >= line.length - 1)
                {
                    break;
                }
                cod = line.charCodeAt(count);
            }
            return count;
        }

        public function messageIconFunction(node:Object):Class
        {
            if (node.hasOwnProperty("children"))
            {
                return CSSIconUtil.getClass(".node");
            }
            else
            {
                return CSSIconUtil.getClass(".leaf");
            }
        }

		]]>
	</mx:Script>
    <mx:ApplicationControlBar percentWidth="100">
        <mx:Spacer percentWidth="100"/>
        <mx:Button id="spy" toolTip="Flex Spy" click="FlexSpy.show()" styleName="flexSpyButton" width="24"/>
    </mx:ApplicationControlBar>
    <mx:TabNavigator percentHeight="100" percentWidth="100" paddingTop="0" creationPolicy="all">
        <mx:HDividedBox label="FlexTracer" percentWidth="100" percentHeight="100" liveDragging="true">
            <mx:VBox percentHeight="100" percentWidth="100">
                <mx:DataGrid id="logGrid" percentWidth="100" percentHeight="100" dataProvider="{traces}"
                             borderStyle="solid" borderSides="right" verticalScrollPolicy="on"
                             change="onLogGridSelectionChange()">
                    <mx:columns>
                        <mx:DataGridColumn headerText="Time" dataField="time" itemRenderer="{new LogTimeRenderer()}"
                                           width="90" sortable="true"/>
                        <mx:DataGridColumn headerText="Sender" dataField="sender" itemRenderer="{new SenderRenderer()}"
                                           width="200" sortable="true"/>
                        <mx:DataGridColumn headerText="Message" dataField="logObject"
                                           itemRenderer="{new MessageRenderer()}" sortable="false"/>
                    </mx:columns>
                </mx:DataGrid>
            </mx:VBox>
            <mx:VBox percentHeight="100" percentWidth="30" minWidth="0">
                <mx:VDividedBox percentWidth="100" percentHeight="100">
                    <mx:VBox percentWidth="100" percentHeight="80" minWidth="0">
                        <mx:Tree id="propertiesTree" styleName="objectTree" iconFunction="messageIconFunction" dataDescriptor="{new ObjectDataDescriptor()}" percentHeight="100"
                                 percentWidth="100" borderSides="left"/>
                    </mx:VBox>
                </mx:VDividedBox>
            </mx:VBox>
        </mx:HDividedBox>
        <mx:VBox label="trace" percentHeight="100" percentWidth="100" creationPolicy="all">
            <!--itemRenderer="{new TraceRenderer()}"-->
            <mx:List id="traceLog" itemRenderer="{new TraceRenderer()}" percentHeight="100" percentWidth="100"
                     borderStyle="none" verticalScrollPolicy="on"/>
        </mx:VBox>
    </mx:TabNavigator>
</mx:WindowedApplication>
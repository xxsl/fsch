<?xml version="1.0"?>
<mx:HDividedBox xmlns:mx="http://www.adobe.com/2006/mxml"
                implements="ui.ILogConsole"
                label="Connector">
    <mx:Script><![CDATA[
        import connection.ITraceMessage;

        import log.LogTimeRenderer;
        import log.MessageRenderer;
        import log.ObjectDataDescriptor;
        import log.SenderRenderer;

        import mx.collections.ArrayCollection;

        import mx.collections.Sort;
        import mx.collections.SortField;
        import mx.utils.ObjectUtil;
        import mx.utils.StringUtil;

        import styles.CSSIconUtil;

        private var _dataPrividerChanged:Boolean;
        private var _dataPrivider:ArrayCollection;

        private var _autoScroll:Boolean;

        public function get autoScroll():Boolean
        {
            return _autoScroll;
        }

        public function set autoScroll(value:Boolean):void
        {
            _autoScroll = value;
        }

        public function set dataProvider(value:ArrayCollection):void
        {
            _dataPrivider = value;
            _dataPrividerChanged = true;

            var sort:Sort;
            if (logGrid.dataProvider && ArrayCollection(logGrid.dataProvider).sort)
            {
                sort = ArrayCollection(logGrid.dataProvider).sort;
            }
            else
            {
                sort = new Sort();
                var field:SortField = new SortField();
                field.name = "time";
                sort.fields = [field];
            }
            _dataPrivider.sort = sort;
            _dataPrivider.refresh();
            invalidateProperties();
        }

        protected override function commitProperties():void
        {
            super.commitProperties();

            if (_dataPrividerChanged)
            {
                logGrid.dataProvider = _dataPrivider;
                _dataPrividerChanged = false;
                if(autoScroll)
                    logGrid.callLater(logGrid.scrollToIndex, [_dataPrivider.length - 1]);
            }
        }

        private function onLogGridSelectionChange():void
        {
            if (logGrid.selectedItem)
            {
                var message:ITraceMessage = ITraceMessage(logGrid.selectedItem);
                propertiesTree.dataProvider = printObject(message);
            }
        }

        public function printObject(obj:ITraceMessage, filters:Array = null):ArrayCollection
        {
            var string:String = ObjectUtil.toString(obj.message, null, filters);
            var lines:Array = string.split("\n");
            var result:ArrayCollection = new ArrayCollection();
            parseBlock(0, lines, result);
            var itemAt:Object = result.getItemAt(0);
            itemAt.label = obj.messageAsString;
            return result;
        }

        private function parseBlock(pos:int, lines:Array, result:ArrayCollection):int
        {
            var node:Object = {"label":StringUtil.trim((lines[pos] as String)), "children": new ArrayCollection()};

            var min:int = countSpace(lines[pos] as String);
            var cnt:int;
            var cnt2:int;
            var type:String = "";
            for (var i:int = pos + 1; i < lines.length; i++)
            {
                cnt = countSpace(lines[i] as String);
                if (cnt == (min + 2))
                {
                    cnt2 = countSpace(lines[i + 1] as String);
                    if ((cnt2 == (cnt + 2)))
                    {
                        i = parseBlock(i, lines, ArrayCollection(node["children"])) - 1;
                    }
                    else
                    {
                        var propertyNode:Object = {label: StringUtil.trim((lines[i] as String))};
                        ArrayCollection(node["children"]).addItem(propertyNode);
                    }
                }
                else
                {
                    break;
                }
            }
            result.addItem(node);
            return i;
        }

        private function countSpace(line:String):int
        {
            if ((line == null) || (line.length == 0))
            {
                return 0;
            }
            var count:int = 0;
            var cod:Number = line.charCodeAt(count);
            while (cod == 32)
            {
                count++;
                if (count >= line.length - 1)
                {
                    break;
                }
                cod = line.charCodeAt(count);
            }
            return count;
        }

        public function messageIconFunction(node:Object):Class
        {
            if (node.hasOwnProperty("children"))
            {
                return CSSIconUtil.getClass(".node");
            }
            else
            {
                return CSSIconUtil.getClass(".leaf");
            }
        }

        ]]></mx:Script>
    <mx:HDividedBox label="FlexTracer" percentWidth="100" percentHeight="100" liveDragging="true">
        <mx:VBox percentHeight="100" percentWidth="100">
            <mx:DataGrid id="logGrid" percentWidth="100" percentHeight="100"
                         borderStyle="solid" borderSides="right" verticalScrollPolicy="on"
                         change="onLogGridSelectionChange()">
                <mx:columns>
                    <mx:DataGridColumn headerText="Time" dataField="time" itemRenderer="{new LogTimeRenderer()}"
                                       width="90" sortable="true"/>
                    <mx:DataGridColumn headerText="Sender" dataField="sender" itemRenderer="{new SenderRenderer()}"
                                       width="200" sortable="true"/>
                    <mx:DataGridColumn headerText="Message" dataField="logObject"
                                       itemRenderer="{new MessageRenderer()}" sortable="false"/>
                </mx:columns>
            </mx:DataGrid>
        </mx:VBox>
        <mx:VBox percentHeight="100" percentWidth="30" minWidth="0">
            <mx:VDividedBox percentWidth="100" percentHeight="100">
                <mx:VBox percentWidth="100" percentHeight="80" minWidth="0">
                    <mx:Tree id="propertiesTree" styleName="objectTree" iconFunction="messageIconFunction"
                             dataDescriptor="{new ObjectDataDescriptor()}" percentHeight="100"
                             percentWidth="100" borderSides="left"/>
                </mx:VBox>
            </mx:VDividedBox>
        </mx:VBox>
    </mx:HDividedBox>
</mx:HDividedBox>

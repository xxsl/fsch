<?xml version="1.0" encoding="utf-8"?>
<app:Main xmlns:app="components.main.*"
          xmlns:mx="http://www.adobe.com/2006/mxml"
          xmlns:local="components.logs.*"
          xmlns:components="components.*"
          xmlns:toolbars="components.toolbars.*"
          xmlns:code="http://code.google.com/p/flexlib/"
          title="Flex Compiler SHell client">
    <mx:Style source="style/fcsh.css"/>
    <mx:Script>
		<![CDATA[
        import amf.network.VB6Socket;
        import amf.vo.BaloonVO;
        import amf.vo.CommandVO;
        import amf.vo.FcshTargets;

        import build.BuildEvent;
        import build.BuildFacade;
        import build.JavaLauncher;
        import build.Target;

        import com.bananas.generated.Compiler;
        import com.bananas.generated.FileSpecs;
        import com.bananas.generated.FlexConfig;
        import com.bananas.generated.IncludeLibraries;
        import com.bananas.xml.ClassConverter;

        import components.PreferencesComponent;
        import components.logs.ConsoleTarget;

        import flexlib.controls.tabBarClasses.SuperTab;

        import mx.collections.ArrayCollection;
        import mx.collections.Sort;
        import mx.collections.SortField;
        import mx.controls.textClasses.TextRange;
        import mx.logging.ILogger;
        import mx.logging.Log;
        import mx.logging.LogEventLevel;
        import mx.rpc.xml.Schema;
        import mx.rpc.xml.SchemaManager;
        import mx.rpc.xml.SchemaTypeRegistry;
        import mx.rpc.xml.XMLEncoder;
        import mx.utils.ObjectUtil;

        import prefs.PreferenceChangeEvent;
        import prefs.PreferencesFacade;

        import processing.RemoteController;
        import processing.RemoteEvent;

        include "build/schema.as";

        private var xsd:Schema = new Schema(flex_config_xsd_xml);

        private static var log:ILogger = Log.getLogger("fcsh");
        private static var _instance:fcsh;

        private var preferencesTab:PreferencesComponent;
        public var startTime:Date;

        [Bindable]
        public var isConnected:Boolean = false;

        [Bindable]
        public var isRunning:Boolean = false;

        [Bindable]
        public var isBuildEnabled:Boolean = false;

        private function onFcshRunStop():void
        {
            var object:CommandVO = new CommandVO();
            if (isRunning)
            {
                object.command = "empty";
                object.target = FcshTargets.STOP;
                VB6Socket.instance.sendObject(object);
            }
            else
            {
                startTime = new Date();
                object.command = JavaLauncher.getCommand();
                object.target = FcshTargets.START;
                VB6Socket.instance.sendObject(object);
            }
        }

        private function onBuildButtonClick():void
        {
            isBuildEnabled = false;
            progressBar.showProgress("Building...");
            var object:CommandVO = new CommandVO();
            var target:Target = Target.fromObject(targetsCombo.selectedItem);
            BuildFacade.instance.reset(target.name);
            if (!BuildFacade.instance.targetIDs.hasOwnProperty(target.name))
            {
                object.command = target.command();
            }
            else
            {
                object.command = "compile " + BuildFacade.instance.targetIDs[target.name];
            }
            object.target = FcshTargets.EXEC;
            logShell(object.command + "\n");
            VB6Socket.instance.sendObject(object);
        }

        override protected function initializeApplication():void
        {
            super.initializeApplication();
            var target:ConsoleTarget = new ConsoleTarget(logWindow);
            //target.filters = ["amf.*"];
            target.level = LogEventLevel.DEBUG;
            target.traceEnabled = true;
            Log.addTarget(target);

            _instance = this;

            //load prefs
            PreferencesFacade.instance.load();

            //populate targetsCombo
            loadTargets();

            //close policy for tabs
            superTab.setClosePolicyForTab(0, SuperTab.CLOSE_NEVER);

            //listent for prefs change and populate targetsComno
            PreferencesFacade.instance.addEventListener(PreferenceChangeEvent.PREFERENCE_CHANGED_EVENT, onPrefs, false, 0, true);
            PreferencesFacade.instance.addEventListener(PreferenceChangeEvent.ADD_EDIT_ACTION, onPrefs, false, 0, true);
            PreferencesFacade.instance.addEventListener(PreferenceChangeEvent.DELETE_ACTION, onPrefs, false, 0, true);

            //listen for remote messages
            RemoteController.instance.addEventListener(RemoteEvent.COMMAND_EVENT, onCommand, false, 0, true);
            RemoteController.instance.addEventListener(RemoteEvent.DATA_EVENT, onData, false, 0, true);
            RemoteController.instance.addEventListener(RemoteEvent.ERROR_EVENT, onError, false, 0, true);

            //listen for buildevents
            BuildFacade.instance.addEventListener(BuildEvent.BUILD_ERROR, onBuildError, false, 0, true);
            BuildFacade.instance.addEventListener(BuildEvent.BUILD_SUCCESSFULL, onBuildSuccessfull, false, 0, true);
            BuildFacade.instance.addEventListener(BuildEvent.BUILD_WARNING, onBuildWarning, false, 0, true);

            //socket listeners
            VB6Socket.instance.addEventListener(Event.CLOSE, function (event:Event):void {
                setConnected(false);
            }, false, 0, true);
            VB6Socket.instance.addEventListener(Event.CONNECT, function (event:Event):void {
                setConnected(true);
            }, false, 0, true);

            //create socket and try to connect
            reconnect();
        }

        private function onPrefs(event:PreferenceChangeEvent):void
        {
            loadTargets();
        }

        private function loadTargets():void
        {
            var targets:ArrayCollection = PreferencesFacade.instance.getValue(PreferencesFacade.TARGETS, new ArrayCollection());

            //sort targets
            var sort:Sort = new Sort();
            var sortName:SortField = new SortField("name");
            sort.fields = [sortName];
            targets.sort = sort;
            targets.refresh();
            targetsCombo.dataProvider = targets;
        }

        private function onBuildError(event:BuildEvent):void
        {
            isBuildEnabled = true;
            progressBar.showError("Falure");
            if (event.errors)
            {
                if (event.errors.length == 1)
                {
                    showBaloonTip("Build", event.errors[0], BaloonVO.ERROR);
                }
                else
                {
                    showBaloonTip("Build", event.errors.length + " errors found", BaloonVO.ERROR);
                }
            }
            highLight();
        }

        private function onBuildSuccessfull(event:BuildEvent):void
        {
            isBuildEnabled = true;
            progressBar.showSuccess("Success");
            if (event.info)
            {
                showBaloonTip("Build", "Build successfull. Assigned id is " + event.info[1], BaloonVO.INFO);
            }
            else
            {
                showBaloonTip("Build", "Build successfull", BaloonVO.INFO);
            }
            highLight();
        }

        private function onBuildWarning(event:BuildEvent):void
        {
            isBuildEnabled = true;
            progressBar.showWarning("Warning");
            if (event.warnings)
            {
                if (event.warnings.length == 1)
                {
                    showBaloonTip("Build", event.warnings[0], BaloonVO.WARNING);
                }
                else
                {
                    showBaloonTip("Build", event.warnings.length + " warnings found", BaloonVO.WARNING);
                }
            }
            highLight();
        }

        public function logShell(msg:String):void
        {
            compilerLog.text += msg;
            compilerLog.validateNow();
            compilerLog.verticalScrollPosition = compilerLog.maxVerticalScrollPosition;
        }

        private function highLight():void
        {
            colorize(/(.* Error:[^\r]+)/gim, 0xFF0000);
            colorize(/(.* Warning:[^\r]+)/gim, 0xd77400);
            colorize(/(fcsh: Assigned \d+ as the compile target id)/gim, 0x00AA00);
        }

        private function colorize(pattern:*, color:uint):void
        {
            var match:Array = compilerLog.text.match(pattern);
            var start:int;
            var myTARange:TextRange;
            for each(var substr:String in match)
            {
                start = compilerLog.text.indexOf(substr, start + substr.length);
                myTARange = new TextRange(compilerLog, false, start, start + substr.length);
                myTARange.color = color;
            }
        }

        private function clearLogs():void
        {
            logWindow.text = "";
            compilerLog.text = "";
            //var gen:ClassGenerator = new ClassGenerator();
            //gen.generate();

            //return;
            var schemaTypeRegistry:SchemaTypeRegistry;
            schemaTypeRegistry = SchemaTypeRegistry.getInstance();
            //schemaTypeRegistry.registerClass(new QName(xsd.namespaces["xs"], "boolean"), Boolean);

            //schemaTypeRegistry.registerClass(new QName(xsd.targetNamespace.uri, "flex-config"), Config);

            log.debug("encodeToXML()");
            var qName:QName;
            var xmlEncoder:XMLEncoder;
            var xmlList:XMLList;
            var o:FlexConfig;

            xmlEncoder = new XMLEncoder();
            var schemaManager:SchemaManager = new SchemaManager();
            schemaManager.addSchema(xsd);

            xmlEncoder.schemaManager = schemaManager;

            qName = new QName(xsd.targetNamespace.uri, "flex-config");

            log.debug("QName: " + qName);

            o = new FlexConfig();
            o.benchmark = true;
            o.dumpConfig = "C:/work/google.code/fcsh.air/src/com/bananas/generated/config.xml";
            var fileSpecs:FileSpecs = new FileSpecs();
            o.fileSpecs = fileSpecs;
            fileSpecs.pathElement = "c:/work/realworld/FLX/src/realworld.mxml ";


            var compiler:Compiler = new Compiler();
            o.compiler = compiler;
            compiler.debug = true;
            compiler.incremental = true;
            var includeLibraries:IncludeLibraries = new IncludeLibraries();
            compiler.includeLibraries = includeLibraries;
            includeLibraries.library = "../3rdParty/flexlib/flexlib.swc";

            var conv:ClassConverter = new ClassConverter(o);


            xmlEncoder.strictNillability = false;
            var object:Object = conv.convert();
            xmlList = xmlEncoder.encode(object, qName);


            var string:String = xmlList.toXMLString();
            //log.debug(string);

            log.debug("\n\nEncoding object to XML:\n" + ObjectUtil.toString(object));
            log.debug("\n\nResult:\n" + string);
        }

        public static function get instance():fcsh
        {
            return _instance;
        }

        private function setConnected(value:Boolean):void
        {
            isConnected = value;
            connection.styleName = isConnected ? "connected" : "unconnected";
            if (isConnected)
            {
                showBaloonTip("Info", "Client connected successfully", BaloonVO.INFO);

                connection.toolTip = "Connected";
                progressBar.showSuccess("Client connected");

                var object:CommandVO = new CommandVO();
                object.command = "empty";
                object.target = FcshTargets.STATUS;
                VB6Socket.instance.sendObject(object);
            }
            else
            {
                setFcshRunning(false);
                BuildFacade.instance.clear();
                progressBar.showSuccess("Client disconnected", false);
                connection.toolTip = "Disconnected. Click to establish connection.";
            }
        }

        private function setFcshRunning(value:Boolean):void
        {
            isRunning = value;

            isBuildEnabled = value;
            fcshButton.styleName = isRunning ? "running" : "stopped";
            fcshButton.toolTip = isRunning ? "Stop fcsh" : "Run fcsh";

            if (isRunning)
            {
                progressBar.showSuccess("FCSH is running", false);
            }
            else
            {
                progressBar.showSuccess("FCSH is stopped", false);
            }
        }

        private function reconnect():void
        {
            progressBar.showProgress("Connecting...");
            VB6Socket.instance.connect(PreferencesFacade.instance.getValue(PreferencesFacade.HOST, "localhost"), PreferencesFacade.instance.getValue(PreferencesFacade.PORT, 40000));
        }

        private function onData(event:RemoteEvent):void
        {
            if (event.data.target == FcshTargets.STATUS)
            {
                BuildFacade.instance.clear();
                setFcshRunning(event.data.data == "true");
            }
            if (event.data.target == FcshTargets.START)
            {
                BuildFacade.instance.clear();
                setFcshRunning(true);
                showBaloonTip("Info", "FCSH started", BaloonVO.INFO);
            }
            if (event.data.target == FcshTargets.STOP)
            {
                BuildFacade.instance.clear();
                setFcshRunning(false);
                showBaloonTip("Info", "FCSH stopped", BaloonVO.INFO);
            }
            if (event.data.target == FcshTargets.DATA)
            {
                logShell(event.data.data);
                BuildFacade.instance.process(event.data.data);
            }
        }

        private function onCommand(event:RemoteEvent):void
        {
            if (event.command.target == "system_hotkey")
            {
                if (isBuildEnabled && isRunning && targetsCombo.selectedItem)
                {
                    onBuildButtonClick();
                }
                else
                {
                    showBaloonTip("Error", "Server is busy or stopped", BaloonVO.ERROR);
                }
            }
            else
            {
                throw new Error("Unimplemented: private function onCommand(event:RemoteEvent):void");
            }
        }

        private function onError(event:RemoteEvent):void
        {
            showBaloonTip("Server Error", event.error.description, BaloonVO.ERROR);
        }

        private function showBaloonTip(title:String, message:String, type:int):void
        {
            var baloon:BaloonVO = new BaloonVO();
            baloon.title = title;
            baloon.message = message;
            baloon.type = type;
            VB6Socket.instance.sendObject(baloon);
        }

        private function onShowPreferences():void
        {
            if (!preferencesTab)
            {
                preferencesTab = new PreferencesComponent();
            }
            else
            {
                preferencesTab.load();
            }

            if (!superTab.contains(preferencesTab))
            {
                superTab.addChild(preferencesTab);
            }

            superTab.selectedChild = preferencesTab;
        }

        private function onSendCommand(event:KeyboardEvent):void
        {
            if (event.keyCode == 13 && commandInput.text.length > 0)
            {
                isBuildEnabled = false;
                progressBar.showProgress("Running command...");
                var command:CommandVO = new CommandVO();
                command.target = "fcsh";
                command.command = commandInput.text;
                logShell(commandInput.text + "\n");
                VB6Socket.instance.sendObject(command);
            }
        }
        
		]]>
	</mx:Script>

    <toolbars:MainToolbar id="bar">
        <mx:LinkButton id="fcshButton" click="onFcshRunStop()" toolTip="Run fcsh" height="20" width="20"
                       styleName="stopped"
                       useHandCursor="{isConnected}" enabled="{isConnected}"/>
        <mx:VRule height="100%"/>
        <mx:LinkButton toolTip="Clear logs" width="20" height="20" styleName="clearLogs" click="clearLogs()"/>
        <mx:VRule height="100%"/>
        <mx:ComboBox id="targetsCombo" cornerRadius="0"
                     enabled="{targetsCombo.dataProvider.length > 0 ? isBuildEnabled:false}" toolTip="Select Target"
                     width="196" labelField="name"/>
        <mx:LinkButton toolTip="Build" width="20" height="20"
                       enabled="{ targetsCombo.selectedItem ? isBuildEnabled:false}" styleName="build"
                       id="buildTarget" click="onBuildButtonClick()"/>
        <mx:VRule height="100%"/>
        <mx:LinkButton toolTip="Options" width="20" height="20" styleName="options" click="onShowPreferences()"/>
        <mx:Spacer width="100%"/>
        <mx:HBox width="192" height="22" cornerRadius="4" borderStyle="none" horizontalAlign="right"
                 verticalAlign="middle" paddingRight="1">
            <components:CustomProgress width="156" height="16" labelPlacement="center" indeterminate="true"
                                       enabled="false"
                                       minimum="0" maximum="1" mode="manual" label=" " id="progressBar"
                                       trackColors="[0xededed, 0xededed]"/>
            <mx:LinkButton enabled="{!isConnected}" useHandCursor="{!isConnected}" styleName="unconnected" width="20"
                           id="connection" click="{reconnect()}"/>
        </mx:HBox>
    </toolbars:MainToolbar>
    <code:SuperTabNavigator closePolicy="{SuperTab.CLOSE_ALWAYS}" left="6" right="6" top="38" bottom="6"
                            cornerRadius="4" creationPolicy="all" dragEnabled="false" dropEnabled="false"
                            editableTabLabels="false" id="superTab">
        <mx:Canvas label="Compiler" width="100%" height="100%" creationPolicy="all">
            <local:LogArea left="10" right="10" top="2" bottom="39" borderStyle="none" focusAlpha="0" id="compilerLog"
                           wordWrap="false" editable="false" enabled="true" fontSize="11"/>
            <mx:TextInput keyDown="{onSendCommand(event)}" bottom="10" right="10" left="10" height="22"
                          toolTip="Type command and press Enter" borderStyle="solid" focusAlpha="0" id="commandInput"
                          editable="true" enabled="{isBuildEnabled}"/>
        </mx:Canvas>
        <mx:Canvas label="Log" width="100%" height="100%" creationPolicy="all">
            <local:LogArea id="logWindow" cornerRadius="0" focusEnabled="false" focusAlpha="0"
                           borderStyle="none" top="10" bottom="10" left="10" right="10" wordWrap="false"
                           editable="false"
                           enabled="true" fontFamily="Courier New" fontSize="12"/>
        </mx:Canvas>
    </code:SuperTabNavigator>
</app:Main>